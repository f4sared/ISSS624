---
title: "Hand on ex 1 - Geodata wrangling"
editor: visual
---

## Overview Ex 1

### Step 1: Load packages

```{r}
pacman::p_load(sf,tidyverse)
```

### Step 2: Import Geo spatial Data

Import shapefile into R as a polygon feature dataframe :

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Import shapefile into R as a line feature dataframe :

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

Import KML into R as a Point format:

```{r}
preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

### Step 3: Check content of the data frame 

This function provides a simple overview of the dataframe:

```{r}
st_geometry(mpsz)
```

This function gives a detailed breakdown of the columns and the data within the column:

```{r}
glimpse(mpsz)
```

Here we will take a detailed look at the first 5 rows of the dataset:

```{r}
head(mpsz, n=5)
```

### Step 4: Plotting the data

Below command will plot a map for each of the columns:

```{r}
plot(mpsz)
```

In order to plot the whole map only, we use the following:

```{r}
plot(st_geometry(mpsz))
```

Also we can choose to plot based on a specific column or "feature":

```{r}
plot(mpsz["PLN_AREA_N"])
```

Note\*\*\*\
plot() is only meant for a quick look, for cartographic quality, we should use other packages such as tamp.

### Step 5: Working with projections 

Projection is important because we want to use geospatial data that are of similar coordinate system.

The following code will show how to project from one coordinate system to another coordinate system.

Check the coordinate reference system as follow:

```{r}
st_crs(mpsz)
```

Note\*\*\*\
EPSG stands for "European Petroleum Survey Group"

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Question to self: Why is there a warning above ?

Below we will set the correct EPSG code to 3414:

```{r}
st_crs(mpsz3414)
```

Next we will convert the projection of preschool from wsg84 to svy21:

We will take a loot at the CRS o the preschool:

```{r}
st_crs(preschool)
```

Now we will convert:

```{r}
preschool3414 <- st_transform(preschool, crs=3414)
```

We will now take a look at the converted geometry dataframe:

```{r}
st_geometry(preschool3414)
```

We can see that after conversion, the values of the geometry are now different:

```{r}
glimpse(preschool)
```

```{r}
glimpse(preschool3414)
```

Just for interest, we will plot the preschool data:

```{r}
plot(preschool3414)
```

### Step 6: Importing and Converting Aspatial Data

We first import the csv file:

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Next, we check if the files has been imported correctly:

\*\*Here, we will assume that the coordinate data is in the degree format & in wgs84 system

\*\*WGS stands for "World Geodetic System"

```{r}
list(listings)
```
