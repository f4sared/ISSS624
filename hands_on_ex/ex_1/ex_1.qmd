---
title: "Hand on ex 1 - Chap 1 Geodata wrangling"
editor: visual
---

### Overview Ex 1

### Step 1: Load packages

```{r}
pacman::p_load(sf,tidyverse)
```

### Step 2: Import Geo spatial Data

Import shapefile into R as a polygon feature dataframe :

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Import shapefile into R as a line feature dataframe :

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

Import KML into R as a Point format:

```{r}
preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

### Step 3: Check content of the data frame

This function provides a simple overview of the dataframe:

```{r}
st_geometry(mpsz)
```

This function gives a detailed breakdown of the columns and the data within the column:

```{r}
glimpse(mpsz)
```

Here we will take a detailed look at the first 5 rows of the dataset:

```{r}
head(mpsz, n=5)
```

### Step 4: Plotting the data

Below command will plot a map for each of the columns:

```{r}
plot(mpsz)
```

In order to plot the whole map only, we use the following:

```{r}
plot(st_geometry(mpsz))
```

Also we can choose to plot based on a specific column or "feature":

```{r}
plot(mpsz["PLN_AREA_N"])
```

Note\*\*\*\
plot() is only meant for a quick look, for cartographic quality, we should use other packages such as tamp.

### Step 5: Working with projections

Projection is important because we want to use geospatial data that are of similar coordinate system.

The following code will show how to project from one coordinate system to another coordinate system.

Check the coordinate reference system as follow:

```{r}
st_crs(mpsz)
```

Note\*\*\*\
EPSG stands for "European Petroleum Survey Group"

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Question to self: Why is there a warning above ?

Below we will set the correct EPSG code to 3414:

```{r}
st_crs(mpsz3414)
```

Next we will convert the projection of preschool from wsg84 to svy21:

We will take a loot at the CRS o the preschool:

```{r}
st_crs(preschool)
```

Now we will convert:

```{r}
preschool3414 <- st_transform(preschool, crs=3414)
```

We will now take a look at the converted geometry dataframe:

```{r}
st_geometry(preschool3414)
```

We can see that after conversion, the values of the geometry are now different:

```{r}
glimpse(preschool)
```

```{r}
glimpse(preschool3414)
```

Just for interest, we will plot the preschool data:

```{r}
plot(preschool3414)
```

### Step 6: Importing and Converting Aspatial Data

We first import the csv file:

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Next, we check if the files has been imported correctly:

\*\*Here, we will assume that the coordinate data is in the degree format & in wgs84 system

\*\*WGS stands for "World Geodetic System"

```{r}
list(listings)
```

Next, we will convert the imported csv file to a dataframe:

We will first convert listings into a dataframe, then convert/project accordingly.

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude","latitude"), crs=4326) %>% st_transform(crs=3414)
```

Next we will take a look at the features and columns:

```{r}
glimpse(listings_sf)
```

### Step 7: Geoprocessing with sf package

In this section, we will learn to use geo processing functions, buffering and point in polygon count.

#### Buffering

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

Just for interest, we will plot the buffered cycling path:

```{r}
plot(buffer_cycling)
```

Next we calculate the area:

We will add this back to the main dataframe buffer_cycling

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)

```

Next, we will get the sum:

```{r}
sum(buffer_cycling$AREA)
```

We will also take a look at the newly added column "AREA"

```{r}
glimpse(buffer_cycling)
```

#### Point in polygon count

We first check the dataframe:

Our dataframe consists of 323 areas

```{r}
mpsz
```

Perform first intersection:

This will produce a dataframe with 323 rows. In each of the rows, we will get the index of the preschool whose coordinates fall into our polygon area.

```{r}
intersect <- st_intersects(mpsz3414, preschool3414)
```

Store the counts into the main dataframe

```{r}
mpsz3414$`PreSch Count`<- lengths(intersect)
```

Check the summary statistics:

```{r}
summary(mpsz3414$`PreSch Count`)
```

Next, we will list the top 3 planning zone with most number of preschools using the function below:

```{r}
top_n(mpsz3414, 3, `PreSch Count`)
```

Calculate and save the area:

```{r}
mpsz3414$Area <- mpsz3414 %>% st_area()
```

```{r}
testing <- mpsz3414 %>% st_area()
head(testing, n=20)
```

Use the mutate function:

```{r}
mpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = (`PreSch Count`/Area)*1000000)
```

------------------------------------------------------------------------

For fun and learning, we will try to plot a specific area such as queens town

```{r}
specific_plot <- mpsz3414 %>% filter(PLN_AREA_C == "MS")
plot(specific_plot["PLN_AREA_N"])
plot(st_geometry(specific_plot))
```

------------------------------------------------------------------------

### Step 8: EDA Exploratory Data Analysis

Create a histogram to show the preschool density:

```{r}
hist(mpsz3414$`PreSch Density`)
```

To get better plot, we will use ggplot:

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`), y= as.numeric(`PreSch Count`)))+ geom_point()+
    labs(title = "Scatter Plot",
       subtitle= "My Plot",
      x = "Pre-school density (per km sq)",
      y = "Preschool Counts")

```

\`\`\`
