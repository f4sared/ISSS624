---
title: "Hand on ex 1 Choropleth Mapping with R"
editor: visual
---

## Overview 

### Step 1: Import Packages 

As usual, we first import all the packages:

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

### Step 2: Import the data 

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Examine the contents:

```{r}
head(mpsz, n=1)
```

Next, we import the csv attribute data into R:

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

Data Wrangling:

Below we will prepare the new dataframe.

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

Convert some data into upper case:

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next we will join the tables together:

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
```

Save the table:

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Step 3: Do some plotting with various tools 

#### qtm()

Make our first plot based on the column "Dependency".

However, a disadvantage of qtm() is that i makes individual layers harder to control.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

#### tm_shape()

With the disadvantage of the qtm(), we will next try tm_shape() to get better professional quality:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

#### Drawing a base map

tm_shape() is the basic building block.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

We can also draw according to each column feature with tm_polygon:

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

tm_polygon is a wrapper of tm_fill, just that it is missing the borders:

```{r}
tm_shape(mpsz_pop2020)+tm_fill("DEPENDENCY")
```

so now, we will add the borders in:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```
