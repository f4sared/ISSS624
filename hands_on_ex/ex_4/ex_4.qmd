---
title: "Hand on ex 4 - Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method"
editor: visual
---

# Overview

# Step 1: Loading the packages

Packages used:

-   olsrr: used for building OLS and diagnostics

-   GWmodel: used for calibrating geographically weighted models

-   corrplot: used for correlation plots

-   spdep: used for spatial weight matrix creation

-   sf: used for reading and loading file to sf format

-   tidyverse

    -   readr: used for reading rectangular files

    -   ggplot: used for more in depth plotting

    -   dplyr: used for data manipulation

-   tmap: used for thematic mapping

-   ggpubr: used for publication ready ggplots.

-   gtsummary: used for creating publication ready summary

-   here: used for generating file paths

```{r}
pacman::p_load(olsrr, GWmodel, corrplot,
               spdep, sf, tidyverse, tmap, ggpubr, gtsummary,
               here)
               
```

# Step 2: Loading data

## Boundary data:

First using the here function, we will generate the path

```{r}
boundary_file <- here("data","dataSingapore","geospatial")
boundary_file
```

Using st_read of the sf package, we read the boundary data:

```{r}
mpsz = st_read(dsn = boundary_file, layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
tm_shape(mpsz)+
  tm_polygons() 
```

Using the function st_crs() of the sf package, we check the data:

```{r}
st_crs(mpsz)
```

Check the bounding box with st_bbox(mpsz):

```{r}
st_bbox(mpsz) 
```

So here the EPSG is wrong, we need to transform it to 3414

We use st_transform() of the sf package for this:

```{r}
mpsz_svy21 <- st_transform(mpsz, 3414)
```

```{r}
tm_shape(mpsz_svy21)+
  tm_polygons() 
```

We check the CRS once again:

```{r}
st_crs(mpsz_svy21)
```

Finally we check the bounding box:

```{r}
st_bbox(mpsz_svy21) 
```

## Aspatial Data:

We generate file path:

```{r}
csv_file <- here("data","dataSingapore","aspatial", "Condo_resale_2015.csv")
csv_file
```

Read the csv with read_csv() from readr package of the tidyverse, import as tibble frame:

```{r}
condo_resale = read_csv(csv_file)
```

Use glimpse() of dplyr to check the data:

```{r}
glimpse(condo_resale)
```

Check long data:

```{r}
head(condo_resale$LONGITUDE)
```

Check lat data:

```{r}
head(condo_resale$LATITUDE)
```

Use summary of base R to get the tibble frame summary statistics:

```{r}
summary(condo_resale)
```

## Convert Aspatial tibble dataframe to sf object:

We use the st_as_sf() function of the sf package to convert:\
(need the name of the long and lat column, the order matters !)

```{r}
condo_resale.sf <- st_as_sf(condo_resale,
                            coords = c("LONGITUDE", "LATITUDE"),
                            crs=4326) %>%
  st_transform(crs=3414)
```

Check the outcome:

```{r}
st_crs(condo_resale.sf) 
```

Check the data with head():

```{r}
head(condo_resale.sf)
```

# Step 3: EDA

## Correcting skewness of dependent var

Question: why do we only fix the dependent variables and not the independent variables ?

We use ggplot to visualize the histogram of the selling price:

```{r}
ggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")
```

Since the selling price is right skewed, we need to perform a log transformation. For the left skew, we will need to use power transformation.

Using mutate() of the dplyr function, we will do a log transformation:

```{r}
condo_resale.sf <- condo_resale.sf %>%
  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))
```

We then plot the log selling price as follow:

```{r}
ggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")
```

We observed that the data skewness has slightly improved.

## Histogram of independent variables:

Using ggarrange, we will plot the histogram of mutilple independent variables:

```{r}
AREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + 
  geom_histogram(bins=20, color="black", fill="light blue")

AGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + 
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, 
                               aes(x= `PROX_URA_GROWTH_AREA`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

PROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, 
                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +
  geom_histogram(bins=20, color="black", fill="light blue")

ggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, 
          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,
          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  
          ncol = 3, nrow = 4)
```

## Statistical Point Map

We do the settings as follow:

```{r}
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
```

Using tm_dots() we will plot the points of each row on the map:

```{r}
tm_shape(mpsz_svy21)+
  tm_polygons() +
tm_shape(condo_resale.sf) +
  tm_dots(col = "SELLING_PRICE",
          alpha = 0.6,
          style="quantile") +
  tm_view(set.zoom.limits = c(11,14))
```

Set back to plot mode:

```{r}
tmap_mode("plot")
```

# Step 4: Hedonistic Pricing Model in R

## Simple Linear Regression:

We use the function lm() of the R stats package to build a linear regression model:

```{r}
condo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)
```

lm() returns the class of "lm" for sinlge or "mlm" for multiple.

```{r}
summary(condo.slr)
```

From the above, the gradient is 14719.0 and the intercept is -258121.1. P value is significant enough that we can reject the null hypothesis that the points are random. R square is 45% meaning that model is able to explain 45% of the resale prices.

Draw scatterplot with gradient line with "lm" as a method:

```{r}
ggplot(data=condo_resale.sf,  
       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +
  geom_point() +
  geom_smooth(method = lm)
```

## Check Correlation:

Before building the multiple linear regression, we need to check for correlation and remove some independent variables.

We will use corrplot as follow:

```{r}
corrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = "AOE",
         tl.pos = "td", tl.cex = 0.5, method = "number", type = "upper")
```

Lease_99 year will be removed since it is highly correlated to freehold.

## Multiple linear regression method:

Again we use the lm() of the R stats package to build a model:

```{r}
condo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + 
                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +
                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + 
                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + 
                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + 
                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                data=condo_resale.sf)
summary(condo.mlr)
```

## Preparing publication quality table: olsrr

Question: what does olsrr do ? it seems to be generating only a report.

After removing the insignificant independent variable we calibrate using olsrr:

```{r}
condo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + 
                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +
                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + 
                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + 
                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,
                 data=condo_resale.sf)
ols_regress(condo.mlr1)
```

## Preparing publication quality table: gtsummary

```{r}
tbl_regression(condo.mlr1, intercept = TRUE)
```

```{r}
tbl_regression(condo.mlr1, 
               intercept = TRUE) %>% 
  add_glance_source_note(
    label = list(sigma ~ "\U03C3"),
    include = c(r.squared, adj.r.squared, 
                AIC, statistic,
                p.value, sigma))
```

## Check for multicollinearity

Using ols_vif_tol() function from olsrr, we test for signs of multicollinearity.

```{r}
ols_vif_tol(condo.mlr1)
```

Since VIF are all below value of 10, there are no signs of multicollinearity.

## Perform linearity assumption test:

In multiple linear regression, it is important to test the assumption for linearity.

We use the ols_plot_resid_fit() of the olsrr package to perform the test:

```{r}
ols_plot_resid_fit(condo.mlr1)
```

Since most of the points are scattered around the zero line, the relationships between dependent and independent variables are thus linear.

## Test for normality

We can also plot the histogram of the residuals with ols_plot_resid_hist():

```{r}
ols_plot_resid_hist(condo.mlr1)
```

Alternatively we can also use ols_test_normality () :

```{r}
ols_test_normality(condo.mlr1)
```

## Testing for spatial auto correlation:

Save the residuals as a dataframe:

```{r}
mlr.output <- as.data.frame(condo.mlr1$residuals)
```

Join the newly created dataframe with sf:

```{r}
condo_resale.res.sf <- cbind(condo_resale.sf, 
                        condo.mlr1$residuals) %>%
rename(`MLR_RES` = `condo.mlr1.residuals`)
```

Convert the new dataframe to spatial format:

```{r}
condo_resale.sp <- as_Spatial(condo_resale.res.sf)
condo_resale.sp
```

Set interactive mode:

```{r}
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
```

Plot the interactive map:

```{r}
tm_shape(mpsz_svy21)+
  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4) +
tm_shape(condo_resale.res.sf) +  
  tm_dots(col = "MLR_RES",
          alpha = 0.6,
          style="quantile") +
  tm_view(set.zoom.limits = c(11,14))
```

set back to plot mode:

```{r}
tmap_mode("plot")
```

## Moran's I test

This time there is no need to compute the centroid of each ploygon, instead, we will use directly the points:

We use the dnearneigh() of the spdep to compute the neighbor by distance:

```{r}
nb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)
summary(nb)
```

The neighbor list is then converted to spatial weights:

```{r}
nb_lw <- nb2listw(nb, style = 'W')
summary(nb_lw)
```

The Moran's I test is then performed with lm.morantest() function of spdep:

```{r}
lm.morantest(condo.mlr1, nb_lw)
```

# Step 5: Hedonic Pricing Model with GWmodel

## Fixed bandwidth

### Compute Fixed Bandwidth

To identify the optimal fixed bandwidth, we use the bw.gwr() of the GWmodel package.

We will specify the dependent variable followed by the independent variables:

```{r}
bw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                     FAMILY_FRIENDLY + FREEHOLD, 
                   data=condo_resale.sp, 
                   approach="CV", 
                   kernel="gaussian", 
                   adaptive=FALSE, 
                   longlat=FALSE)
```

### Calibrate GWR model with fixed bandwidth

Using the output bw.fixed generated earlier, we will now calibrate the model:

```{r}
gwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                         FAMILY_FRIENDLY + FREEHOLD, 
                       data=condo_resale.sp, 
                       bw=bw.fixed, 
                       kernel = 'gaussian', 
                       longlat = FALSE)
```

We can check the output as follow:

```{r}
gwr.fixed
```

Question: Why is the adjusted R square value much better compared to R value of the multiple linear regression ?

## Adaptive bandwidth

### Compute adaptive bandwidth:

Similar to the code above, we now change the "adaptive" setting to TRUE:

```{r}
bw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + 
                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + 
                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + 
                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                      data=condo_resale.sp, 
                      approach="CV", 
                      kernel="gaussian", 
                      adaptive=TRUE, 
                      longlat=FALSE)
```

Calibrate GWR model with adaptive bandwidth:

```{r}
gwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + 
                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + 
                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + 
                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                          data=condo_resale.sp, bw=bw.adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE, 
                          longlat = FALSE)
```

We display the model output as follow:

```{r}
gwr.adaptive
```

## Visualizing GWR output

Question: Why is this chunk of code here ?

```{r}
# condo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%
#   st_transform(crs=3414)
```

Question: Why is this chunk of code here ?

```{r}
# condo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)
# condo_resale.sf.adaptive.svy21  
```

Create the dataframe for plotting:

```{r}
gwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)
condo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))
```

Visualize Local R2:

```{r}
tmap_mode("view")
tm_shape(mpsz_svy21)+
  tm_polygons(alpha = 0.1) +
tm_shape(condo_resale.sf.adaptive) +  
  tm_dots(col = "Local_R2",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
tmap_mode("plot")
```

Visualize central Region:

```{r}
tm_shape(mpsz_svy21[mpsz_svy21$REGION_N=="CENTRAL REGION", ])+
  tm_polygons()+
tm_shape(condo_resale.sf.adaptive) + 
  tm_bubbles(col = "Local_R2",
           size = 0.15,
           border.col = "gray60",
           border.lwd = 1)
```
