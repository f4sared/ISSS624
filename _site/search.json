[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1.html",
    "href": "hands_on_ex/ex_1/ex_1.html",
    "title": "Hand on ex 1 - Chap 1 Geodata wrangling",
    "section": "",
    "text": "Step 1: Load packages\n\npacman::p_load(sf,tidyverse)\n\n\n\nStep 2: Import Geo spatial Data\nImport shapefile into R as a polygon feature dataframe :\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\f4sared\\ISSS624\\hands_on_ex\\ex_1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImport shapefile into R as a line feature dataframe :\n\ncyclingpath <- st_read(dsn = \"data/geospatial\", layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `D:\\f4sared\\ISSS624\\hands_on_ex\\ex_1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImport KML into R as a Point format:\n\npreschool <- st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\f4sared\\ISSS624\\hands_on_ex\\ex_1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nStep 3: Check content of the data frame\nThis function provides a simple overview of the dataframe:\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nThis function gives a detailed breakdown of the columns and the data within the column:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nHere we will take a detailed look at the first 5 rows of the dataset:\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\nStep 4: Plotting the data\nBelow command will plot a map for each of the columns:\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nIn order to plot the whole map only, we use the following:\n\nplot(st_geometry(mpsz))\n\n\n\n\nAlso we can choose to plot based on a specific column or “feature”:\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\nNote***\nplot() is only meant for a quick look, for cartographic quality, we should use other packages such as tamp.\n\n\nStep 5: Working with projections\nProjection is important because we want to use geospatial data that are of similar coordinate system.\nThe following code will show how to project from one coordinate system to another coordinate system.\nCheck the coordinate reference system as follow:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nNote***\nEPSG stands for “European Petroleum Survey Group”\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nQuestion to self: Why is there a warning above ?\nBelow we will set the correct EPSG code to 3414:\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNext we will convert the projection of preschool from wsg84 to svy21:\nWe will take a loot at the CRS o the preschool:\n\nst_crs(preschool)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nNow we will convert:\n\npreschool3414 <- st_transform(preschool, crs=3414)\n\nWe will now take a look at the converted geometry dataframe:\n\nst_geometry(preschool3414)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)\n\n\nWe can see that after conversion, the values of the geometry are now different:\n\nglimpse(preschool)\n\nRows: 1,359\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <POINT [°]> POINT Z (103.7614 1.308683 0), POINT Z (103.7536 1.3…\n\n\n\nglimpse(preschool3414)\n\nRows: 1,359\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <POINT [m]> POINT Z (19997.26 32333.17 0), POINT Z (19126.75 331…\n\n\nJust for interest, we will plot the preschool data:\n\nplot(preschool3414)\n\n\n\n\n\n\nStep 6: Importing and Converting Aspatial Data\nWe first import the csv file:\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNext, we check if the files has been imported correctly:\n**Here, we will assume that the coordinate data is in the degree format & in wgs84 system\n**WGS stands for “World Geodetic System”\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\nNext, we will convert the imported csv file to a dataframe:\nWe will first convert listings into a dataframe, then convert/project accordingly.\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\",\"latitude\"), crs=4326) %>% st_transform(crs=3414)\n\nNext we will take a look at the features and columns:\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\n\n\nStep 7: Geoprocessing with sf package\nIn this section, we will learn to use geo processing functions, buffering and point in polygon count.\n\nBuffering\n\nbuffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)\n\nJust for interest, we will plot the buffered cycling path:\n\nplot(buffer_cycling)\n\n\n\n\nNext we calculate the area:\nWe will add this back to the main dataframe buffer_cycling\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nNext, we will get the sum:\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\nWe will also take a look at the newly added column “AREA”\n\nglimpse(buffer_cycling)\n\nRows: 1,625\nColumns: 4\n$ CYL_PATH_C <chr> \"SBWG\", \"SBWG\", \"SBWG\", \"SBWG\", \"SBWG\", \"SBWG\", \"SBWG\", \"SB…\n$ CYL_PATH_1 <chr> \"Sembawang\", \"Sembawang\", \"Sembawang\", \"Sembawang\", \"Sembaw…\n$ geometry   <POLYGON [m]> POLYGON ((26829 47350.2, 26..., POLYGON ((26762.25 …\n$ AREA       [m^2] 547.08438 [m^2], 681.87931 [m^2], 432.75754 [m^2], 404.6815…\n\n\n\n\nPoint in polygon count\nWe first check the dataframe:\nOur dataframe consists of 323 areas\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nPerform first intersection:\nThis will produce a dataframe with 323 rows. In each of the rows, we will get the index of the preschool whose coordinates fall into our polygon area.\n\nintersect <- st_intersects(mpsz3414, preschool3414)\n\nStore the counts into the main dataframe\n\nmpsz3414$`PreSch Count`<- lengths(intersect)\n\nCheck the summary statistics:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nNext, we will list the top 3 planning zone with most number of preschools using the function below:\n\ntop_n(mpsz3414, 3, `PreSch Count`)\n\nSimple feature collection with 3 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 35966 xmax: 42940.57 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO            SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N\n1      189          2        TAMPINES EAST    TMSZ02      N   TAMPINES\n2      272          3 SENGKANG TOWN CENTRE    SESZ03      N   SENGKANG\n3      290          3       WOODLANDS EAST    WDSZ03      N  WOODLANDS\n  PLN_AREA_C          REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         TM       EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55\n2         SE NORTH-EAST REGION      NER 5A2D0E9E6B285069 2014-12-05 35163.81\n3         WD      NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1 37392.39  10180.624    4339824 MULTIPOLYGON (((42196.76 38...           33\n2 41501.14   5216.401    1455508 MULTIPOLYGON (((35615.75 40...           25\n3 46991.63   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\nCalculate and save the area:\n\nmpsz3414$Area <- mpsz3414 %>% st_area()\n\n\ntesting <- mpsz3414 %>% st_area()\nhead(testing, n=20)\n\nUnits: [m^2]\n [1]  1630379.3   559816.2   160807.5   595428.9   387429.4  1030378.8\n [7]   551732.0   290184.7  1084792.3   631644.3  1826848.6   293706.4\n[13]  1844060.7   392563.3   506589.0 36707720.9  4207271.1  4963787.1\n[19]  2206319.5  4919132.4\n\n\nUse the mutate function:\n\nmpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = (`PreSch Count`/Area)*1000000)\n\n\nFor fun and learning, we will try to plot a specific area such as queens town\n\nspecific_plot <- mpsz3414 %>% filter(PLN_AREA_C == \"MS\")\nplot(specific_plot[\"PLN_AREA_N\"])\n\n\n\nplot(st_geometry(specific_plot))\n\n\n\n\n\n\n\n\nStep 8: EDA Exploratory Data Analysis\nCreate a histogram to show the preschool density:\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nTo get better plot, we will use ggplot:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`), y= as.numeric(`PreSch Count`)))+ geom_point()+\n    labs(title = \"Scatter Plot\",\n       subtitle= \"My Plot\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Preschool Counts\")\n\n\n\n\n```"
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-1-import-packages",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-1-import-packages",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 1: Import Packages",
    "text": "Step 1: Import Packages\nAs usual, we first import all the packages:\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-2-import-the-data",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-2-import-the-data",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 2: Import the data",
    "text": "Step 2: Import the data\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\f4sared\\ISSS624\\hands_on_ex\\ex_1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine the contents:\n\nhead(mpsz, n=1)\n\nSimple feature collection with 1 feature and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 30794.28 ymin: 28369.47 xmax: 32362.39 ymax: 30140.01\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND   PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y MARINA SOUTH         MS\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381    1630379 MULTIPOLYGON (((31495.56 30...\n\n\nNext, we import the csv attribute data into R:\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Wrangling:\nBelow we will prepare the new dataframe.\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nConvert some data into upper case:\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext we will join the tables together:\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n\nSave the table:\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-3-plotting-with-various-tools",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-3-plotting-with-various-tools",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 3: Plotting with various tools",
    "text": "Step 3: Plotting with various tools\n\nUsing qtm()\nMake our first plot based on the column “Dependency”.\nHowever, a disadvantage of qtm() is that i makes individual layers harder to control.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\nUsing tm_shape()\nWith the disadvantage of the qtm(), we will next try tm_shape() to get better professional quality:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\nDrawing a base map\nUisng tm_shape() as the basic building block.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\nWe can also draw according to each column feature with tm_polygon:\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\ntm_polygon is a wrapper of tm_fill, just that it is missing the borders:\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\")\n\n\n\n\nso now, we will add the borders in:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\nData Classification Methods: Using Different Styles\nNote: tmap has a total of ten data classification methods !\nHere we will use classification quantile of 5 classes:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nAnother option is to make each bin range equal as follow:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nDIY_1: Here we try out some different styles:\n\nA <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              style = \"jenks\", \n              palette = \"Blues\")+\n    tm_layout(main.title = \"jenks\")\n\nB <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              style = \"quantile\", \n              palette = \"Blues\")+\n  tm_layout(main.title = \"quantile\")\n\nC <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              style = \"sd\", \n              palette = \"Blues\")+\n  tm_layout(main.title = \"sd\")\n\nD <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              style = \"equal\", \n              palette = \"Blues\")+\n  tm_layout(main.title = \"equal\")\n\ntmap_arrange(A, B, C, D, asp=2, ncol=2)\n\n\n\n\nThe three basic methods are quantile, sd (standard deviation) and equal. One of the most informative plot would be the “quantile” classification style. As shown above, this styles provides the most distinct visual classification that is more informative.\nThe “equal” style provides the least information since each bin is separated into equal range.\nUsing the style “quantile” allows us to take into account the distribution of the data.\nAs shown below, majority of the values are below 5.\n\nggplot(data=mpsz_pop2020, \n       aes(x= as.numeric(`DEPENDENCY`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Distribution of DEPENDENCY\",\n      x = \"DEPENDENCY\",\n      y = \"Frequency\")\n\nWarning: Removed 92 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\nDIY_2: Data Classification Methods: Using different number of classes\nFor this section, we will use jenks !\nwhere n = 2, 6, 10 , 20\n\nA <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              n=2,\n              style = \"jenks\", \n              palette = \"Blues\")+\n    tm_layout(main.title = \"n=2\")\n\nB <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              n=6,\n              style = \"jenks\", \n              palette = \"Blues\")+\n  tm_layout(main.title = \"n=6\")\n\nC <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              n=10,\n              style = \"jenks\", \n              palette = \"Blues\")+\n  tm_layout(main.title = \"n=10\")\n\nD <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"DEPENDENCY\", \n              n=20,\n              style = \"jenks\", \n              palette = \"Blues\")+\n  tm_layout(main.title = \"n=20\")\n\ntmap_arrange(A, B, C, D, asp=2, ncol=2)\n\n\n\n\nFrom what we can see above, as the number of classes get bigger and bigger, more and more details are revealed ! Previous regions with similar colors are now further differentiated with better gradient spread."
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-4-color-scheme",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-4-color-scheme",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 4: Color scheme",
    "text": "Step 4: Color scheme\nHere, we will assign a new color !\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWe can also reverse the color shading as follow:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-5-map-layouts-and-styles",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-5-map-layouts-and-styles",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 5: Map Layouts and styles",
    "text": "Step 5: Map Layouts and styles\nApparently we can add even more customization options to our map plots !\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nWe can even change the map style and appearance !\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\""
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-6-add-cartographic-furniture-to-the-map",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-6-add-cartographic-furniture-to-the-map",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 6: Add Cartographic Furniture to the map",
    "text": "Step 6: Add Cartographic Furniture to the map\nWe can further add more useful features to the generated map\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "hands_on_ex/ex_1/ex_1_2.html#step-7-multiple-map",
    "href": "hands_on_ex/ex_1/ex_1_2.html#step-7-multiple-map",
    "title": "Hand on ex 1 - Chap 2 Choropleth Mapping with R",
    "section": "Step 7: Multiple map",
    "text": "Step 7: Multiple map\nHere we will attempt to plot multiple plots together:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nWe can even mix and match 2 different maps with different styles and fearures\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nWe can further make facet plots of different regions:\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\nCreate multiple standalone maps:\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\nSelect areas that meets criterion:\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands_on_ex1.html",
    "href": "Hands_on_ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Hello ! Here is my second page"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624_Licheng_Yan_Learning_Journal",
    "section": "",
    "text": "This Netlify site is a documentation of my learning journey for geospatial analytics and Rstudio\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n50 + 50\n\n[1] 100"
  },
  {
    "objectID": "in_class/ex_1/in_class_ex_1.html",
    "href": "in_class/ex_1/in_class_ex_1.html",
    "title": "In Class ex 1 - Chap 3 Spatial Weights and Applications",
    "section": "",
    "text": "Step 1: Check and load packages\nIn this chapter, we will learn how to compute spatial weights using R.\nCheck if we have required packages:\n\npackages = c('sf', 'spdep', 'tmap', 'tidyverse')\nfor (p in packages){\n  if(!require(p, character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: sf\n\n\nLinking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\n\n\nLoading required package: spdep\n\n\nLoading required package: sp\n\n\nLoading required package: spData\n\n\nTo access larger datasets in this package, install the spDataLarge\npackage with: `install.packages('spDataLarge',\nrepos='https://nowosad.github.io/drat/', type='source')`\n\n\nLoading required package: tmap\n\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nImport the required packages:\n\npacman::p_load(sf,spdep,tmap,tidyverse)\n\n\n\nStep 2: Loading the data into R\nWe will first load the shapefile into the environment:\n\nhunan <- st_read(dsn = \"dataH/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\f4sared\\ISSS624\\in_class\\ex_1\\dataH\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nWe will then check the loaded file:\n\nlist(hunan)\n\n[[1]]\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3 Shape_Leng Shape_Area    County\n1   Changde 21098   Anxiang      County   1.869074 0.10056190   Anxiang\n2   Changde 21100   Hanshou      County   2.360691 0.19978745   Hanshou\n3   Changde 21101    Jinshi County City   1.425620 0.05302413    Jinshi\n4   Changde 21102        Li      County   3.474325 0.18908121        Li\n5   Changde 21103     Linli      County   2.289506 0.11450357     Linli\n6   Changde 21104    Shimen      County   4.171918 0.37194707    Shimen\n7  Changsha 21109   Liuyang County City   4.060579 0.46016789   Liuyang\n8  Changsha 21110 Ningxiang      County   3.323754 0.26614198 Ningxiang\n9  Changsha 21111 Wangcheng      County   2.292093 0.13049161 Wangcheng\n10 Chenzhou 21112     Anren      County   2.240739 0.13343936     Anren\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nNext we will Import the CSV file:\n\nhunan2012 <- read_csv(\"dataH/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter the CSV files is imported, we will check it:\n\nlist(hunan2012)\n\n[[1]]\n# A tibble: 88 × 29\n   County    City     avg_w…¹ depos…²    FAI Gov_Rev Gov_Exp    GDP GDPPC    GIO\n   <chr>     <chr>      <dbl>   <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <dbl>  <dbl>\n 1 Anhua     Yiyang     30544  10967   6832.    457.   2703  13225  14567  9277.\n 2 Anren     Chenzhou   28058   4599.  6386.    221.   1455.  4941. 12761  4189.\n 3 Anxiang   Changde    31935   5517.  3541     244.   1780. 12482  23667  5109.\n 4 Baojing   Hunan W…   30843   2250   1005.    193.   1379.  4088. 14563  3624.\n 5 Chaling   Zhuzhou    31251   8241.  6508.    620.   1947  11585  20078  9158.\n 6 Changning Hengyang   28518  10860   7920     770.   2632. 19886  24418 37392 \n 7 Changsha  Changsha   54540  24332  33624    5350    7886. 88009  88656 51361 \n 8 Chengbu   Shaoyang   28597   2581.  1922.    161.   1192.  2570. 10132  1681.\n 9 Chenxi    Huaihua    33580   4990   5818.    460.   1724.  7755. 17026  6644.\n10 Cili      Zhangji…   33099   8117.  4498.    500.   2306. 11378  18714  5843.\n# … with 78 more rows, 19 more variables: Loan <dbl>, NIPCR <dbl>, Bed <dbl>,\n#   Emp <dbl>, EmpR <dbl>, EmpRT <dbl>, Pri_Stu <dbl>, Sec_Stu <dbl>,\n#   Household <dbl>, Household_R <dbl>, NOIP <dbl>, Pop_R <dbl>, RSCG <dbl>,\n#   Pop_T <dbl>, Agri <dbl>, Service <dbl>, Disp_Inc <dbl>, RORP <dbl>,\n#   ROREmp <dbl>, and abbreviated variable names ¹​avg_wage, ²​deposite\n\n\nAfter the CSV file is imported, we need to perform a relational join using dplyr:\n**Note: Here it seems relational join magically detects the common feature to join by. WOW !\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\n\n\nStep 3: Visualize using plots\nNext we will make use of the tmap package (tm_shape, tm_text, qtm):\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.2)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nStep 4: Computing the Contiguity Spatial Weights"
  },
  {
    "objectID": "in_class/ex_1/in_class_ex_1_old.html",
    "href": "in_class/ex_1/in_class_ex_1_old.html",
    "title": "in_class_ex_1",
    "section": "",
    "text": "This is xxx\nGetting Started\nInstall and load the tidyverse and sf packages.\n\npacman::p_load(sf, tidyverse, spdep)\n\nImport Geo spatial data\nImport Polygon\n\nhunan_sf <- st_read(dsn = \"dataH/geospatial\", \n                  layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\f4sared\\ISSS624\\in_class\\ex_1\\dataH\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting and transforming using a nested piping\n\nhunan <- read_csv(\"dataH/aspatial/Hunan_2012.csv\") \n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  }
]