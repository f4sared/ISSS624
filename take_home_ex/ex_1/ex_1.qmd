---
title: "Take Home Ex-1"
editor: visual
---

# Overview

# Step 1: Load the required Packages

sf : Simple features for R. We import this package to help us read the aspatial and geospatial data.

tidyverse: This package help us to transform and better present the data.

tmap: We use this package to plot thematic maps

spdep: We use this package to help us obtain the spatial weights.

funModeling: We use this package to help us with EDA

here: Helps us generate a path to a specific directory on the root

[Load the packages:]{.underline}

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling, purrr, here)
```

# Step 2: Import the Data

## Import Nigeria water point data-file:

[Generate a path:]{.underline}\
We use the here function to generate a specific file path on the root folder.

```{r}
shapefile_path <- here("data", "dataNigeria", "geospatial")
shapefile_path
```

Some useful link for the CRS:

-   <https://datacarpentry.org/organization-geospatial/03-crs/>

-   <https://www.nceas.ucsb.edu/sites/default/files/2020-04/OverviewCoordinateReferenceSystems.pdf>

st_read() belongs to the sf package. It reads simple features from file or database. Simple features or simple feature access refers to formal standard ISO 19125-1:2004 that describes how real world data can be represented in computers, with emphasis on the spatial geometry of these objects. Link below:

<https://cran.r-project.org/web/packages/sf/vignettes/sf1.html#:~:text=Simple%20features%20or%20simple%20feature,spatial%20geometry%20of%20these%20objects.>

To find the CRS of the shapefile, open the .prj file as a text. It will tell you which projection system is being used.

[Read the shapefile using st_read() belonging to the sf package:]{.underline}\
The data read will be saved as a simple feature data table.\
We will use the filter() function of dplyr package to filter only rows for Nigeria

```{r}
# wp <- st_read(
#   dsn = shapefile_path,
#   layer = "geo_export",
#   crs = 4326) %>%
#   filter(clean_coun == "Nigeria")
```

[Generate the save path using here function:]{.underline}

```{r}
savefile_path <- here("data", "dataNigeria", "geospatial", "wp_nga.rds")
savefile_path
```

[We will next save the file using write_rds() of the tidyverse package:]{.underline}\
rds is a native data format of R.

```{r}
# wp_ng <- write_rds(wp, savefile_path)
```

## Import Nigeria geo-boundary file:

[Next we will make the path to the geo boundary file:]{.underline}

```{r}
shapefile_path <- here("data", "dataNigeria", "boundary")
shapefile_path
```

[Next we will Import the Nigeria LGA Boundary Data with st_read() function:]{.underline}\
The imported data will be saved as a simple features dataset.

```{r}
nga <- st_read(
  dsn = shapefile_path,
  layer = "geoBoundaries-NGA-ADM2",
  crs = 4326)
```

## Downsize further the wp_nga data:

[Load the previously saved data:\
]{.underline}We will select specific columns using select().

```{r}
# final <- read_rds(rdsfile_path) %>% select(1:2, 14:17, 23)
```

[Create the path for saving the file]{.underline}

```{r}
# savefile_path <- here("data", "dataNigeria", "geospatial", "wp_nga_v2.rds")
# savefile_path
```

[Save the file:]{.underline}

```{r}
# write_rds(final, savefile_path)
```

# Step 3: Data wrangling

## Visualize Initial distribution

[Generate path to rds file saved previously:]{.underline}

```{r}
rdsfile_path <- here("data", "dataNigeria", "geospatial","wp_nga_v2.rds")
rdsfile_path
```

[Load the rds file with read_rds() function of the tidyverse package:]{.underline}\
We will also make use of the piping to replace the "na" values with "unknown".\
mutate() is a function of the dplyr package.

```{r}
wp_nga <- read_rds(rdsfile_path) %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

[Check the CRS of the spatial datafile with st_crs():]{.underline}

```{r}
st_crs(wp_nga)
```

[Use the freq() of the funModeling package to show the distribution percentage of status_cle:]{.underline}

```{r}
freq(data=wp_nga,
     input = 'status_cle')
```

## Filter for functional water-points:

[Here we will use the filter() function from the dplyr package to select "functional" rows only:\
]{.underline}We use the [%in%]{.underline} to denote the membership in the group of strings.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

[Then we will plot with freq() function from funModeling to show the distribution:]{.underline}

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

## Filter for non-functional

[Filter for non-functional rows:]{.underline}\
Use %in% for to select rows that fall into the specific categories.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

[Plot the distribution with the freq() function:]{.underline}

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

## Filter for unknown:

[Lastly we filter for the rows that have unknown status:]{.underline}

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Perform data manipulation (Point-In-Polygon):

Using st_intersects, we will be able to create a list of rows from wp_nga that intersects each row of nga.\
For the intersection to work, st_intersect will check if each point falls within the polygon of nga.\
Next we use the lengths() function to count the number of instances. Then we append to a new column.

[We repeat this step across all 3 categories of Functional, Non-Functional & Unknown:]{.underline}

```{r}
nga_wp <- nga %>%
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

[Next, using the mutate() function of dplyr, we will create 2 new columns:]{.underline}

-   pct_functional = \`wpt functional\`/\`total wpt\`

-   pct_non-functional = \`wpt non-functional\`/\`total wpt\`

We will then use select() of dplyr to retain the fields that we require.

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) 
```

[We will then create a save file path:]{.underline}

```{r}
savefile_path <- here("data", "dataNigeria", "geospatial", "nga_wp.rds")
savefile_path
```

[Next we will save this final dataframe using write_rds() of tidyverse package:]{.underline}

```{r}
write_rds(nga_wp, savefile_path)
```

# Step 4: Plot distribution of water point types

[Plot the distribution of the water points using qtm() package of tmap:\
]{.underline}Here we will add the additional settings to better adjust the size of the legend.\
This is done via the tm_layout() function.

```{r}
nga_wp <- read_rds(savefile_path)

total <- qtm(nga_wp, fill = "total wpt") + 
    tm_layout(legend.height = 0.4,legend.width = 0.4)

wp_functional <- qtm(nga_wp, fill = "wpt functional") + 
    tm_layout(legend.height = 0.4,legend.width = 0.4)

wp_nonfunctional <- qtm(nga_wp, fill = "wpt non-functional") +
    tm_layout(legend.height = 0.4,legend.width = 0.4)

unknown <- qtm(nga_wp, fill = "wpt unknown") + 
    tm_layout(legend.height = 0.4,legend.width = 0.4)

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=2, ncol=2)
```

# Step 5: Transform to EPSG 26391

[We will use the st_crs() function to check the current EPSG of the sf datafile:]{.underline}

```{r}
st_crs(nga_wp)
```

[Next, we will use st_transform() to project to the new crs 26391:]{.underline}

```{r}
nga_wp_26391 <- st_transform(nga_wp, crs = 26391)
```

[We then check the new CRS:]{.underline}

```{r}
st_crs(nga_wp_26391)
```

[Once again, we will plot the map to check if everything has been projected correctly:]{.underline}

```{r}
total <- qtm(nga_wp_26391, fill = "total wpt") + 
    tm_layout(legend.height = 0.4,legend.width = 0.4)

wp_functional <- qtm(nga_wp_26391, fill = "wpt functional") + 
    tm_layout(legend.height = 0.4,legend.width = 0.4)

wp_nonfunctional <- qtm(nga_wp_26391, fill = "wpt non-functional") +
    tm_layout(legend.height = 0.4,legend.width = 0.4)

unknown <- qtm(nga_wp_26391, fill = "wpt unknown") + 
    tm_layout(legend.height = 0.4,legend.width = 0.4)

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=2, ncol=2)
```

# Step 6: Thematic mapping with qtm() & tmap()

## Plotting with qtm()

Set the tmap mode to "view" for interactive mode. Else set to "plot".

[qtm() represents quick plotting with tmap package:]{.underline}

```{r}
tmap_mode("plot")
qtm(nga_wp_26391, 
    fill = "wpt non-functional")
```

## Plotting with tmap()

### Jenks:

Jenks: Identify groups with similar values and maximizes the difference between them.

[Using interactive tmap(), we will plot using "equal" classification:]{.underline}

```{r}
tmap_mode("view")
tm_shape(nga_wp_26391)+
  tm_fill(c("wpt non-functional", "wpt functional"),
          style = "jenks") +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

------------------------------------------------------------------------

### Quantile:

Splits variables in quantiles, Consequently there are same number of observations in each interval.

[Using interactive tmap(), we will plot using "quantile" classification:]{.underline}

```{r}
tm_shape(nga_wp_26391)+
  tm_fill(c("wpt non-functional", "wpt functional"),
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

------------------------------------------------------------------------

We will use bbox to get better visuals:\
<https://stackoverflow.com/questions/60892033/how-do-you-position-the-title-and-legend-in-tmap>

```{r}
tmap_mode("plot")

# make some bbox magic
bbox_new <- st_bbox(nga_wp_26391)
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
# bbox_new[1] <- bbox_new[1] - (0.25 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] + (0.75 * xrange) # xmax - right
# bbox_new[2] <- bbox_new[2] - (0.25 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.01 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
  st_as_sfc() # ... and make it a sf polygon


tm_shape(nga_wp_26391, bbox = bbox_new)+
  tm_fill("wpt non-functional", 
          style = "quantile", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.5) +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Quantile Plot of WPT Non-Functional",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "center"),
            frame = TRUE) + 
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.2, position= c("center", "bottom")) +
  tm_grid(lwd = 0.1, alpha = 0.2) 
```

```{r}
tmap_mode("plot")

# make some bbox magic
bbox_new <- st_bbox(nga_wp_26391)
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
# bbox_new[1] <- bbox_new[1] - (0.25 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] + (0.75 * xrange) # xmax - right
# bbox_new[2] <- bbox_new[2] - (0.25 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.01 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
  st_as_sfc() # ... and make it a sf polygon


tm_shape(nga_wp_26391, bbox = bbox_new)+
  tm_fill("wpt functional", 
          style = "quantile", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.5) +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Quantile Plot of WPT Non-Functional",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "center"),
            frame = TRUE) + 
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.2, position= c("center", "bottom")) +
  tm_grid(lwd = 0.1, alpha = 0.2) 
```

------------------------------------------------------------------------

# Step 7: Prepare the Spatial Weights

Usually for geospatial weights preparation, there are 2 options:

-   Contiguity based weights

    -   Useful when the polygons are of similar size

-   Distance based weights

    -   Fixed distance

    -   K-nearest neighbors (Adaptive distance)

    -   Inversed-Distance

For our analysis, we will consider using the distance based weights because the polygons size is not spread evenly across the map of Nigeria.

## Prepare the coordinates

In order to work with fixed distance weight matrix, we need to prepare the coordinates of the center of gravity (COG) for all the polygons.

To achieve this, we will need to pass the column "geometry" into the function st_centroid() from the sf package. This function will calculate the COG and return us the coordinates accordingly. We will also make use of the map_dbl() function from the purrr package to apply the st_centroid() function to row.

[Longitude:]{.underline}

```{r}
longitude <- map_dbl(nga_wp_26391$geometry, ~st_centroid(.x)[[1]])
```

[Latitude:]{.underline}

```{r}
latitude <- map_dbl(nga_wp_26391$geometry, ~st_centroid(.x)[[2]])
```

Next, we will use the function of cbind() from the base package to bind our coordinates together.

[Bind long & lat:]{.underline}

```{r}
coords <- cbind(longitude, latitude)
```

[Check if output is correct:]{.underline}

```{r}
head(coords)
```

## Determine cut off distance:

In order to ensure that each polygon has at least 1 neighbor, we need to determine the cut off distance. To do this, we will first run the k-nearest neighbor with k=1. This is achieved with the function of knearneigh() of the spdep package.

[We run the code as follow:]{.underline}

```{r}
k1 <- knn2nb(knearneigh(coords))
```

After obtaining k1, a list of 774 polygons where each row shows the nearest neighbor polygon ID, we next need to calculate the distance between all of them using nbdists() of spdep.

Next, in order to calculate the summary, we need then to unlist() the output of nbdists(). This is then followed by using the summary() function which reports to us the max distance for us to use.

[We run the code as follow:]{.underline}

```{r}
k1dists <- unlist(nbdists(k1, coords, longlat = FALSE))
summary(k1dists)
```

From the above summary, it shows that the minimum distance for every polygon to have a neighbor is 71.661, thus we will use the value 72140.

## Compute the fixed distance neighbor list:

With the above information, we will then compute the fixed distance weight matrix using dnearneigh() function from spdep. For this to work, we will need the coordinate of the polygons, min dist & max dist.

We will run the code as follow, this will give us a nb (neighbor) object data wm_d72:

```{r}
nb_d72 <- dnearneigh(coords, 0, 72140, longlat = FALSE)
nb_d72
```

[Next, we will display our results for viewing:]{.underline}

```{r}
str(nb_d72)
```

## Plot the fixed distance neighbor list:

Using the plot() function, we will then visualize the neighbors that we have identified.

```{r}
plot(nga_wp_26391$geometry, border="black", axes = TRUE)
plot(nb_d72, coords, add=TRUE, col="red")
```

# Step 8: Plotting Spatial Lag

## Create row standardized weight matrix

We will use the nb2listw() function of spdep package to convert the nb list to weights. We set the style to "W" in order to perform the row-standardized steps.

[We run the code as follow:]{.underline}

```{r}
swm_d72<- nb2listw(nb_d72, style="W", zero.policy = TRUE)
```

## Compute spatial lag with row-standardized weights

Now we will use the lag.listw() function from spdep to return us the lag list. As an input, we will provide the row-standardized weight matrix and the variables "wpt non-functional" & wpt functional.

### Lag for non-functional

[We run the code as follow:]{.underline}

```{r}
lag.list <- list(nga_wp_26391$shapeName, lag.listw(swm_d72, nga_wp_26391$`wpt non-functional`))
lag.res_NF <- as.data.frame(lag.list)
colnames(lag.res_NF) <- c("shapeName", "lag_NF")
nga_wp_26391$lag_NF <- lag.res_NF$lag_NF
```

[We will then plot the lagged variable:]{.underline}

```{r}
non_func <- qtm(nga_wp_26391, "wpt non-functional") +
tm_layout(main.title = "WPT Non-Functional",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            legend.width = 0.3,
            legend.height = 0.25,
            frame = TRUE)
lag_non_func <- qtm(nga_wp_26391, "lag_NF")+
tm_layout(main.title = "Lagged WPT Non-Functional",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            legend.width = 0.3,
            legend.height = 0.25,
            frame = TRUE)
tmap_arrange(non_func, lag_non_func, asp=1, ncol=2)
```

### Lag for functional

[We run the code as follow:]{.underline}

```{r}
lag.list <- list(nga_wp_26391$shapeName, lag.listw(swm_d72, nga_wp_26391$`wpt functional`))
lag.res_F <- as.data.frame(lag.list)
colnames(lag.res_F) <- c("shapeName", "lag_F")
nga_wp_26391$lag_F <- lag.res_F$lag_F
```

```{r}
non_func <- qtm(nga_wp_26391, "wpt functional") +
tm_layout(main.title = "WPT Functional",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            legend.width = 0.3,
            legend.height = 0.25,
            frame = TRUE)
lag_non_func <- qtm(nga_wp_26391, "lag_F")+
tm_layout(main.title = "Lagged WPT Functional",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            legend.width = 0.3,
            legend.height = 0.25,
            frame = TRUE)
tmap_arrange(non_func, lag_non_func, asp=1, ncol=2)
```

# Step 9: Global Measure of Spatial Auto Correlation

## Global Moran's I

To get an indication of the global spatial clustering auto-correlation, we will perform the Moran's I test. This is an analytic approach.

[WPT Non-Functional Moran's I test:]{.underline}

```{r}
moran.test(nga_wp_26391$`wpt non-functional`,
           listw=swm_d72,
           zero.policy = TRUE,
           na.action=na.omit)
```

The global Moran's I statistic is \>\> 0 and the p-value is statistically significant. This shows that there is indication of clustering of the non-functional water point.

------------------------------------------------------------------------

[WPT Functional Moran's I test:]{.underline}

```{r}
moran.test(nga_wp_26391$`wpt functional`,
           listw=swm_d72,
           zero.policy = TRUE,
           na.action=na.omit)
```

The global Moran's I statistic is \>\> 0 and the p-value is statistically significant. This shows that there is indication of clustering of the functional water point.

------------------------------------------------------------------------

## Monte Carlo Moran's I

While the Moran's I test is fast since it works analytically, we will need to perform Monte Carlo Moran's I. This method allows us to perform simulation by generating many random datasets across multiple simulations.

Our Moran's I should fall to either extremes of the Moran's I histogram from the simulation. This shows that our Moran's I value did not occur because of randomization.

For the Monte Carlo Moran's I test, we will use the moran.mc() function from the spdep package.

[WPT Non-Functional Moran's I test:]{.underline}

```{r}
set.seed(1234)
bperm_NF= moran.mc(nga_wp_26391$`wpt non-functional`, 
                listw=swm_d72, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm_NF
```

Here we can see that our results are statistically significant with p value of 0.001. Also the Moran's I calculated is similar to the analytic test.

[We will visualize the simulation results from Monte Carlo as follow:]{.underline}

```{r}
hist(bperm_NF$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I for Non-Functional")
abline(v=0, 
       col="red") 
```

------------------------------------------------------------------------

[WPT Functional Moran's I test:]{.underline}

```{r}
set.seed(1234)
bperm_F= moran.mc(nga_wp_26391$`wpt functional`, 
                listw=swm_d72, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm_F
```

Here we can see that our results are statistically significant with p value of 0.001. Also the Moran's I calculated is similar to the analytic test.

[We will visualize the simulation results from Monte Carlo as follow:]{.underline}

```{r}
hist(bperm_F$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I for Non-Functional")
abline(v=0, 
       col="red") 
```

# Step 10: Correlogram for Global Moran's I

In the earlier section, we did the computation for Moran's I and Monte Carlo Moran's I. Both of them are a global measure of spatial autocorrelation. For both the non-functional and functional water point, we observe the presence of spatial correlation.

Another way for us to examine the spatial autocorrelation is by using correlogram. These diagram provide useful insights to how the Moran's I or Geary's C changes as the spatial lag/distance increase.

With the increase of spatial lad / distance, more neighbors are now included within the weight matrix. This then have further impact on the measure of spatial correlation.

For this section, we will use sp.correlogram() of spdep package. This function will require the neighbor object that we have calculated precious in step 7. We also need to state the style input. We will choose "W" for row-standardization.

[We run the correlogram for the non-functional water point as follow:]{.underline}

```{r}
MI_corr_NF <- sp.correlogram(nb_d72, 
                          nga_wp_26391$`wpt non-functional`, 
                          order=6, 
                          method="I", 
                          style="W",
                          zero.policy=TRUE)
plot(MI_corr_NF)
```

[We check the output for statistical significance:]{.underline}

```{r}
print(MI_corr_NF)
```

For the non-functional water points, our Moran's I decrease with increase lag order. The p values for the first 3 rows are statistically significant.

------------------------------------------------------------------------

[We run the correlogram for the functional water point as follow:]{.underline}

```{r}
MI_corr_F <- sp.correlogram(nb_d72, 
                          nga_wp_26391$`wpt functional`, 
                          order=10, 
                          method="I", 
                          style="W",
                          zero.policy=TRUE)
plot(MI_corr_F)
```

[We check the output for statistical significance:]{.underline}

```{r}
print(MI_corr_F)
```

For the functional water points, our Moran's I decrease more slowly lag order. The p values for the first 6 rows are statistically significant.

------------------------------------------------------------------------

# Step 11: Local Measure of Spatial Auto Correlation

While global Moran's I is a useful statistic to tell us the presence of spatial auto-correlation across the map, it provides little info about the locality of the auto correlation.

The is where local Moran's I come in to save the day. A high local Moran's I statistic indicates similar values clustering around a polygon which is a good indication of spatial auto correlation.

## Non-Functional Water Points (Local Moran's I)

We will use the function order() to create an ordered name list of the areas. This is then followed by the function localmoran() from spdep. Our variable of interest and row-standardized weight matrix is required.

```{r}
localMI_NF <- localmoran(nga_wp_26391$`wpt non-functional`, swm_d72)
head(localMI_NF)
```

```{r}
localMI_NF <- data.frame(localMI_NF)
colnames(localMI_NF)[5] ="Pr"
nga_wp_26391$lc_Ii_NF <- localMI_NF$'Ii'
nga_wp_26391$lc_Pr_NF <- localMI_NF$'Pr'
```

```{r}
localMI.map_NF <- tm_shape(nga_wp_26391) +
  tm_fill(col = "lc_Ii_NF", 
          style = "jenks", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)+
  tm_layout(main.title = "Plot of Local Moran's I",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            frame = TRUE)

pvalue.map_NF <- tm_shape(nga_wp_26391) +
  tm_fill(col = "lc_Pr_NF", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)+
  tm_layout(main.title = "Plot of Local Moran's I P-Value",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            frame = TRUE)

tmap_arrange(localMI.map_NF, pvalue.map_NF, asp=1, ncol=2)
```

## Functional Water Points (Local Moran's I)

We perform the same steps for Functional water points:

```{r}
localMI_F <- localmoran(nga_wp_26391$`wpt functional`, swm_d72)
head(localMI_F)
```

```{r}
localMI_F <- data.frame(localMI_F)
colnames(localMI_F)[5] ="Pr"
nga_wp_26391$lc_Ii_F <- localMI_F$'Ii'
nga_wp_26391$lc_Pr_F <- localMI_F$'Pr'
```

```{r}
localMI.map_F <- tm_shape(nga_wp_26391) +
  tm_fill(col = "lc_Ii_F", 
          style = "jenks", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)+
  tm_layout(main.title = "Plot of Local Moran's I",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            frame = TRUE)

pvalue.map_F <- tm_shape(nga_wp_26391) +
  tm_fill(col = "lc_Pr_F", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)+
  tm_layout(main.title = "Plot of Local Moran's I P-Value",
            main.title.position = "center",
            main.title.size = 1,
            legend.position = c("right", "bottom"),
            frame = TRUE)

tmap_arrange(localMI.map_F, pvalue.map_F, asp=1, ncol=2)
```

# Step 12: Moran Scatterplot

## Scatterplot for Non-Functional water points

```{r}
NF_scatter <- moran.plot(nga_wp_26391$`wpt non-functional`, swm_d72,
                  labels=as.character(nga_wp_26391$shapeName), 
                  xlab="wpt non-functional", 
                  ylab="Spatially lagged wpt non-functional")
```

## Scatterplot for Functional water points

```{r}
F_scatter <- moran.plot(nga_wp_26391$`wpt functional`, swm_d72,
                  labels=as.character(nga_wp_26391$shapeName), 
                  xlab="wpt functional", 
                  ylab="Spatially lagged wpt functional")
```

# Plan:

-   Lagged variables ? \>\>

-   Moran's I test \>\>

-   Monte carlo \>\>

-   Geary C Test

-   Correlogram \>\>

    -   <https://stat.ethz.ch/pipermail/r-sig-geo/2007-August/002467.html>

-   Local Moran I test \>\>

-   Local Moran I scatter plot \>\>

-   LISA

-   G (Local, non-self) , Gstari(Local, self)

-   Getis ORD global G test / General G

    -   <https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-high-low-clustering-getis-ord-general-g-spat.htm#:~:text=Interpretation-,The%20High%2FLow%20Clustering%20(Getis%2DOrd%20General%20G),spatial%20clustering%20of%20feature%20values.>

-   Questions:

    -   W vs B ? How does it work ? \>\> it appears binary or not, the equations take care of themselves
